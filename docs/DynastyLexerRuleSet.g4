lexer grammar DynastyLexerRuleSet;

INT_DEC: ('1' ..'9') ('0' ..'9' | '_')+ (
		('i' | 'u') ('8' | '16' | '32' | '64')
	)?;

INT_HEX:
	'0x' ('0' ..'9' | 'a' ..'f' | 'A' ..'F') (
		'0' ..'9'
		| 'a' ..'f'
		| 'A' ..'F'
		| '_'
	)+ (('i' | 'u') ('8' | '16' | '32' | '64'))?;

INT_OCT:
	'0' ('0' ..'7') ('0' ..'7' | '_')+ (
		('i' | 'u') ('8' | '16' | '32' | '64')
	)?;

INT_BIN:
	'0b' [01] [01_]+ (('i' | 'u') ('8' | '16' | '32' | '64'))?;

FLOAT: (
		(
			(('0' ..'9') ('0' ..'9' | '_'))? '.' (
				('0' ..'9') ('0' ..'9' | '_')
			)
		)
		| ((('0' ..'9') ('0' ..'9' | '_')) '.')
	) ('f' | 'd')?;

EXPONENTIAL: FLOAT [eE] [+-]? ('1' ..'9') ('0' ..'9' | '_')+;

IF: 'if';
FOR: 'for';
WHILE: 'while';
FN: 'fn';
IN: 'in';
TYPE: 'type';
DOT: '.';
LPAR: '(';
RPAR: ')';
LBRA: '{';
RBRA: '}';

IDENT: ('a' ..'z' | 'A' ..'Z' | '_') (
		'a' ..'z'
		| 'A' ..'Z'
		| '0' ..'9'
		| '_'
	)*;

WS: [ \t\r\n\f]+ -> channel(HIDDEN);
